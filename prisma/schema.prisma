datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id                String                @id @default(cuid())
  name              String?
  username          String?               @unique
  email             String?               @unique
  emailVerified     DateTime?
  image             String?
  Sessions          Session[]
  Accounts          Account[]             
  password          String?
  active            Boolean               @default(false) 
  Authenticators    Authenticator[]       
  otps              UserOtp[]              
  files             File[]
  folders           Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}



model UserOtp {
  id          Int       @id @default(autoincrement())
  otp         String    @db.Char(6)
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  purpose     OtpPurpose
  userId      String 
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum OtpPurpose {
  RESET_PASSWORD
  REGISTRATION
}


model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model File {
  id          String    @id @default(cuid())
  name        String
  url         String    // URL du fichier PDF
  qrCode      String    // URL du QR code généré
  status      FileStatus
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  folder      Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade) 
  folderId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Folder {
  id        String    @id @default(cuid())
  name      String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  files     File[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  

  @@unique([userId, name])
}


enum FileStatus {
  ACTIVE
  PAUSED
  DELETED
}
